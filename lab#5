//node lab#5

let currentMatrix = [
  [1, 1, 1],
  [1, 2, 2],
  [1, 0, 3]
]

function transposeMatrix(matrix) {
  return matrix[0].map((_, colIndex) => matrix.map(row => row[colIndex]));
}

function multiplyMatrices(A, B) {
  var result = new Array(A.length).fill(0).map(row => new Array(B[0].length).fill(0));
  return result.map((row, i) => {
    return row.map((val, j) => {
      return A[i].reduce((sum, elm, k) => sum + (elm * B[k][j]), 0)
    })
  })
}

let transposedMatrix = transposeMatrix(currentMatrix);

let matrix = (!(currentMatrix > transposedMatrix || currentMatrix < transposedMatrix)) ?
  currentMatrix : multiplyMatrices(currentMatrix, transposeMatrix(currentMatrix));
console.log(matrix);

let n = matrix[0].length;

let T = [[]];

T[0][0] = Math.pow(matrix[0][0], 0.5);
for (let j = 1; j < n; j++) {
  T[0][j] = matrix[0][j] / T[0][0];
}

console.log('___1___\n', T);

for (let i = 1; i < n; i++) {
  T.push([]);
  let sum = 0;
  for (let k = 1; k < i; k++)
    sum += Math.pow(T[k][i], 2)
  T[i][i] = Math.pow(matrix[i][i] - sum, 0.5)
}

console.log('___2___\n', T)

for (let i = 2; i < n; i++) {
  for (let j = i + 1; j < n; j++) {
    let sum = 0;
    for (let k = 1; k < i; k++)
      sum += T[k][i] * T[k][j];
    T[i][j] = (matrix[i][j] - sum) / T[i][i]
  }
}

console.log('___3___\n', T)